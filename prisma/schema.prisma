
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                 @id @default(auto()) @map("_id") @db.ObjectId
  email               String                 @unique
  username            String                 @unique
  passwordHash        String
  name                String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  collections         Collection[]
  links               Link[]                 @relation("UserLinks")
  sharedCollections   SharedUser[]
  activities          Activity[]
  notifications       Notification[]
  sentInvitations     CollectionInvitation[] @relation("Inviter")
  receivedInvitations CollectionInvitation[] @relation("Invitee")

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model SharedUser {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id])
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  role         Role       @default(VIEWER)
  createdAt    DateTime   @default(now())

  @@map("shared-user")
}

model Collection {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String                 @db.ObjectId
  user        User                   @relation(fields: [userId], references: [id])
  links       Link[]
  isPublic    Boolean                @default(false)
  shortCode   String?                @unique
  isDefault   Boolean                @default(false)
  sharedWith  SharedUser[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  invitations CollectionInvitation[]

  @@map("collection")
}

enum Role {
  VIEWER
  EDITOR
}

model Link {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  title        String?
  description  String?
  collectionId String?     @db.ObjectId
  collection   Collection? @relation(fields: [collectionId], references: [id])
  userId       String      @db.ObjectId
  user         User        @relation("UserLinks", fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("link")
}

model Activity {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  action     Action // Enum for action types
  targetType TargetType // Enum for the type of target (e.g., Link, Collection)
  targetId   String?    @db.ObjectId // Optional for certain actions
  metadata   Json? // Store additional data (e.g., link details or collection name)
  createdAt  DateTime   @default(now())

@@map("activity")
}

enum Action {
  CREATE
  UPDATE
  DELETE
  SHARE
  VIEW
}

enum TargetType {
  LINK
  COLLECTION
  USER
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  metadata  Json? // Optional additional data
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notification")
}

enum NotificationType {
  COLLECTION_SHARE
  ROLE_CHANGE
  LINK_ADDED
  SYSTEM
}

model CollectionInvitation {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String           @db.ObjectId
  collection   Collection       @relation(fields: [collectionId], references: [id])
  inviterId    String           @db.ObjectId
  inviter      User             @relation("Inviter", fields: [inviterId], references: [id])
  inviteeEmail String // Email of the invited user
  inviteeId    String?          @db.ObjectId
  invitee      User?            @relation("Invitee", fields: [inviteeId], references: [id])
  role         Role // Role assigned upon acceptance (VIEWER or EDITOR)
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  expiresAt    DateTime? // Optional expiration date
  token        String           @unique

  @@map("collection-invitation")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
