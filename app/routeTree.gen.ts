/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedBookmarksImport } from './routes/_authed/bookmarks'
import { Route as AuthedCollectionsIndexImport } from './routes/_authed/collections/index'
import { Route as AuthedCollectionsCollectionIdImport } from './routes/_authed/collections/$collectionId'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedBookmarksRoute = AuthedBookmarksImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCollectionsIndexRoute = AuthedCollectionsIndexImport.update({
  id: '/collections/',
  path: '/collections/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCollectionsCollectionIdRoute =
  AuthedCollectionsCollectionIdImport.update({
    id: '/collections/$collectionId',
    path: '/collections/$collectionId',
    getParentRoute: () => AuthedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/bookmarks': {
      id: '/_authed/bookmarks'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof AuthedBookmarksImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/collections/$collectionId': {
      id: '/_authed/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof AuthedCollectionsCollectionIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/collections/': {
      id: '/_authed/collections/'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof AuthedCollectionsIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedBookmarksRoute: typeof AuthedBookmarksRoute
  AuthedCollectionsCollectionIdRoute: typeof AuthedCollectionsCollectionIdRoute
  AuthedCollectionsIndexRoute: typeof AuthedCollectionsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedBookmarksRoute: AuthedBookmarksRoute,
  AuthedCollectionsCollectionIdRoute: AuthedCollectionsCollectionIdRoute,
  AuthedCollectionsIndexRoute: AuthedCollectionsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/bookmarks': typeof AuthedBookmarksRoute
  '/collections/$collectionId': typeof AuthedCollectionsCollectionIdRoute
  '/collections': typeof AuthedCollectionsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/bookmarks': typeof AuthedBookmarksRoute
  '/collections/$collectionId': typeof AuthedCollectionsCollectionIdRoute
  '/collections': typeof AuthedCollectionsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/bookmarks': typeof AuthedBookmarksRoute
  '/_authed/collections/$collectionId': typeof AuthedCollectionsCollectionIdRoute
  '/_authed/collections/': typeof AuthedCollectionsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/bookmarks'
    | '/collections/$collectionId'
    | '/collections'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/bookmarks' | '/collections/$collectionId' | '/collections'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/bookmarks'
    | '/_authed/collections/$collectionId'
    | '/_authed/collections/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/bookmarks",
        "/_authed/collections/$collectionId",
        "/_authed/collections/"
      ]
    },
    "/_authed/bookmarks": {
      "filePath": "_authed/bookmarks.tsx",
      "parent": "/_authed"
    },
    "/_authed/collections/$collectionId": {
      "filePath": "_authed/collections/$collectionId.tsx",
      "parent": "/_authed"
    },
    "/_authed/collections/": {
      "filePath": "_authed/collections/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
